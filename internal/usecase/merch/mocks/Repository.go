// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/VasySS/avito-winter-2025/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// BuyMerch provides a mock function with given fields: ctx, req
func (_m *Repository) BuyMerch(ctx context.Context, req entity.MerchPurchase) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for BuyMerch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.MerchPurchase) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerch provides a mock function with given fields: ctx, name
func (_m *Repository) GetMerch(ctx context.Context, name string) (entity.Merch, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetMerch")
	}

	var r0 entity.Merch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Merch, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Merch); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(entity.Merch)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *Repository) GetUserByUsername(ctx context.Context, username string) (entity.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCoins provides a mock function with given fields: ctx, req
func (_m *Repository) SendCoins(ctx context.Context, req entity.UserTransfer) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SendCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserTransfer) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
