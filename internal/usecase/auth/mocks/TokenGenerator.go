// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	entity "github.com/VasySS/avito-winter-2025/internal/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TokenGenerator is an autogenerated mock type for the TokenGenerator type
type TokenGenerator struct {
	mock.Mock
}

// NewAccessToken provides a mock function with given fields: user, currentTime
func (_m *TokenGenerator) NewAccessToken(user entity.User, currentTime time.Time) (string, error) {
	ret := _m.Called(user, currentTime)

	if len(ret) == 0 {
		panic("no return value specified for NewAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.User, time.Time) (string, error)); ok {
		return rf(user, currentTime)
	}
	if rf, ok := ret.Get(0).(func(entity.User, time.Time) string); ok {
		r0 = rf(user, currentTime)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entity.User, time.Time) error); ok {
		r1 = rf(user, currentTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenGenerator creates a new instance of TokenGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenGenerator {
	mock := &TokenGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
