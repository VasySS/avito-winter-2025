services:
  avito-shop-service:
    build: .
    container_name: avito-shop-service
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    environment:
      # енвы подключения к БД
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_HOST=db
      # порт сервиса
      - SERVER_PORT=${SERVER_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - ACCESS_TOKEN_TTL=${ACCESS_TOKEN_TTL}
    depends_on:
      postgres-migrations:
        condition: service_completed_successfully
    networks:
      - internal

  db:
    image: postgres:17-alpine3.21
    container_name: postgres
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "${DATABASE_PORT}:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}'",
        ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - internal
  postgres-migrations:
    container_name: postgres-migrations
    build:
      context: ./migrations
    environment:
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}?sslmode=disable
    command: ["up"]
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    networks:
      - internal

networks:
  internal:
